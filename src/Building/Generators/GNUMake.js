const { selectCompiler } = require("../../Helper");

const path = require("path");
const fs = require("fs");

module.exports = {
	GNUMakeGenerator: class {

		constructor()
		{
			this.workingDirectory = "";

			this.cppCompilerCmd = "g++";
			this.cCompilerCmd = "gcc";
			this.makeProgram = "make";
			this.archiveProgram = "ar";
		}

		prepareDefaultMakefile()
		{
			let content = "# Generated by cpp-build\n";
			content += `CPP=${this.cppCompilerCmd}\n`;
			content += `CC=${this.cCompilerCmd}\n\n`;
			return content;
		}

		/**
		 * Generates GNU Makefile build info for specified target.
		 * @param {object|string} target - object or string (treated as filename)
		 */
		generate(target)
		{
			if (typeof target === "string")
			{
				let compilerString = null;
				
				{
					const compilerType = selectCompiler(target);

					if (compilerType == "cpp")
						compilerString = "$(CPP)";
					else if (compilerType == "c")
						compilerString = "$(CC)";
				}

				// Do not generate build steps for unsupported file types:
				if (!compilerString)
				{
					return null;
				}
				
				const targetAbsolutePath = path.resolve(this.workingDirectory, target);
				const targetBaseName = path.basename(target);

				// Create build step
				// TODO: add include folders, etc.
				return { 
						type: "step",
						stepName: targetBaseName,
						content: `${compilerString} -o ${targetBaseName}.o -c ${targetAbsolutePath}`
					};
			}
			else if (typeof target === "object")
			{
				if (target.type === "application")
				{
					// 
					const makefilePrefix = this.prepareDefaultMakefile();

					let substepsContent = "";

					const buildAllStep = {
						header: "all:",
						command: `\t$(CPP) -o ${target.name||"a"}`
					};
					for(const f of target.files)
					{
						const fGen = this.generate(f);
						if (fGen)
						{
							buildAllStep.header += " " + fGen.stepName;
							buildAllStep.command += " " + fGen.stepName + ".o";
							substepsContent += `\n${fGen.stepName}:\n\t${fGen.content}`;
						}
					}
					

					return {
						type: "makefile",
						content: `${makefilePrefix}\n\n${buildAllStep.header}\n${buildAllStep.command}\n\n${substepsContent}`
					};
				}
				else
				{
					throw `invalid target type: "${target.type || "unknown"}"`;
				}
			}
		}
	}
}